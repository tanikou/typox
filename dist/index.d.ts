/** Declaration file generated by dts-gen */
import ModelStorage from './storage'

export interface defaults {
  storage: typeof ModelStorage
  lightly: boolean
  message: string
  logger: {
    error: (v: string) => void
  }
}

export interface ReverseOption {
  lightly?: boolean | undefined
  exclusion?: string[]
}

export interface ParseOption {
  nullable?: boolean
  validate?: boolean
}

export class Model implements Record<string, unknown> {
  constructor(source?: any)
  [x: string]: unknown

  parse(source?: any, option?: ParseOption): this

  merge(source?: any): this

  recover(source: any): this

  reverse(source?: any): any

  runDecorators(name: string): Record<string, any>
}

export interface ModelConfig {
  enumeration?: any[]
  from?: string | string[]
  type?: Function | Function[]
  nullable?: boolean
  column?: Record<string, unknown>
  form?: Record<string, unknown>
  format?: (v: any, source: Record<string, unknown>) => any
  parse?: (v: any, source: Record<string, unknown>) => any
  merge?: (v: any, source: Record<string, unknown>) => any
  recover?: (v: any, source: Record<string, unknown>) => any
  to?: string | undefined
  reverse?: (v: any, source: Record<string, unknown>) => any
  omit?: boolean
  validator?: (
    value: any,
    source: Record<string, unknown>
  ) => any | Array<(value: any, source: Record<string, unknown>) => any>
  dep?: string[]
}

export interface CustomDecorator {
  [key: Exclude<string, keyof ModelConfig>]: (me: Record<any, any>) => any
}

export function Entity(): any
export function entity(): any

export function decorators(value?: ModelConfig | CustomDecorator): any

export function format(value: (v: any, me: Record<any, any>) => any): any

export function parse(value: (v: any, me: Record<any, any>) => any): any

export function merge(value: (v: any, me: Record<any, any>) => any): any

export function recover(value: (v: any, me: Record<any, any>) => any): any

export function from(value?: string | string[]): any

export function enumeration(value: any[]): any

export function type(value: any): any

export function nullable(value?: boolean): any

export function validator(value: any): any

export function to(value?: string): any

export function reverse(value: (v: any, me: Record<any, any>) => any): any

export function omit(value?: boolean): any

export function param(...value: any): any

export function column(value: Record<string, unknown>): any

export function form(value: Record<string, unknown>): any

export function dep(attrs: string[]): any

export function setMessageFormat(v: string): void

export function setLogger(logger: { error: (v: string) => void }): void
